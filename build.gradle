plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'io.group'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    def springVersion = "3.2.2"

    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    implementation "org.flywaydb:flyway-core"
    implementation "org.flywaydb:flyway-mysql"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-redis:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springVersion"
    implementation "org.springframework.data:spring-data-redis:$springVersion"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "com.mysql:mysql-connector-j"
    testImplementation "com.jayway.jsonpath:json-path:2.9.0"
    testImplementation "com.redis.testcontainers:testcontainers-redis-junit-jupiter:1.4.6"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-webflux:$springVersion"
    testImplementation "org.testcontainers:junit-jupiter:1.17.6"
}

tasks.named('test') {
    useJUnitPlatform {
        includeTags 'unit'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

test {
    finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform {
        includeTags 'IT'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = file("$buildDir/reports/jacoco")
}

tasks.register("codeCoverageReport", JacocoReport) {
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }
}
